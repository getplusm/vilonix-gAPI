package plusm.vilonix.gapi.exploit.channel;

import com.google.common.collect.Maps;
import io.netty.channel.Channel;
import io.netty.channel.ChannelDuplexHandler;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelPromise;
import net.minecraft.server.v1_12_R1.MinecraftServer;
import net.minecraft.server.v1_12_R1.PacketPlayInCustomPayload;
import org.bukkit.Bukkit;
import org.bukkit.craftbukkit.v1_12_R1.entity.CraftPlayer;
import org.bukkit.entity.Player;
import plusm.vilonix.gapi.loader.DartaAPI;

import java.util.HashMap;

public class PacketChannel {

    private HashMap<Player, Integer> lastBookTick = Maps.newHashMap();

    public void addChannel(final Player player) {
        Channel channel = ((CraftPlayer)player).getHandle().playerConnection.networkManager.channel;
        if (channel.pipeline().get("bookfix") == null) {
            ChannelDuplexHandler channelDuplexHandler = new ChannelDuplexHandler() {

                public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {
                    super.write(ctx, msg, promise);
                }

                public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
                    if (msg instanceof PacketPlayInCustomPayload) {
                        PacketPlayInCustomPayload packet = (PacketPlayInCustomPayload)msg;
                        if (!packet.a().equals("MC|BEdit") && !packet.a().equals("MC|BSign") && !packet.a().equals("MC|BOpen")) {
                            super.channelRead(ctx, msg);
                        } else if (PacketChannel.this.lastBookTick.containsKey(player) && PacketChannel.this.lastBookTick.get(player) + 20 > MinecraftServer.currentTick) {
                            Bukkit.getScheduler().runTask(DartaAPI.getInstance(), () -> {
                                if (player.isOnline()) {
                                    player.kickPlayer("Book edited too quickly!");
                                    DartaAPI.getInstance().getLogger().warning("Book edited too quickly by " + player.getName() + "!");
                                }

                            });
                        } else {
                            PacketChannel.this.lastBookTick.put(player, MinecraftServer.currentTick);
                            super.channelRead(ctx, msg);
                        }
                    } else {
                        super.channelRead(ctx, msg);
                    }

                }
            };
            channel.pipeline().addBefore("packet_handler", "bookfix", channelDuplexHandler);
        }

    }

    public void removeChannel(Player player) {
        Channel channel = ((CraftPlayer)player).getHandle().playerConnection.networkManager.channel;
        if (channel.pipeline().get("bookfix") != null) {
            channel.pipeline().remove("bookfix");
        }

    }

}
